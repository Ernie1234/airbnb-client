/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ReservationsImport } from './routes/reservations'
import { Route as PropertiesImport } from './routes/properties'
import { Route as FavouritesImport } from './routes/favourites'
import { Route as ListingIdImport } from './routes/$listingId'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ReservationsRoute = ReservationsImport.update({
  id: '/reservations',
  path: '/reservations',
  getParentRoute: () => rootRoute,
} as any)

const PropertiesRoute = PropertiesImport.update({
  id: '/properties',
  path: '/properties',
  getParentRoute: () => rootRoute,
} as any)

const FavouritesRoute = FavouritesImport.update({
  id: '/favourites',
  path: '/favourites',
  getParentRoute: () => rootRoute,
} as any)

const ListingIdRoute = ListingIdImport.update({
  id: '/$listingId',
  path: '/$listingId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$listingId': {
      id: '/$listingId'
      path: '/$listingId'
      fullPath: '/$listingId'
      preLoaderRoute: typeof ListingIdImport
      parentRoute: typeof rootRoute
    }
    '/favourites': {
      id: '/favourites'
      path: '/favourites'
      fullPath: '/favourites'
      preLoaderRoute: typeof FavouritesImport
      parentRoute: typeof rootRoute
    }
    '/properties': {
      id: '/properties'
      path: '/properties'
      fullPath: '/properties'
      preLoaderRoute: typeof PropertiesImport
      parentRoute: typeof rootRoute
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$listingId': typeof ListingIdRoute
  '/favourites': typeof FavouritesRoute
  '/properties': typeof PropertiesRoute
  '/reservations': typeof ReservationsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$listingId': typeof ListingIdRoute
  '/favourites': typeof FavouritesRoute
  '/properties': typeof PropertiesRoute
  '/reservations': typeof ReservationsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$listingId': typeof ListingIdRoute
  '/favourites': typeof FavouritesRoute
  '/properties': typeof PropertiesRoute
  '/reservations': typeof ReservationsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$listingId'
    | '/favourites'
    | '/properties'
    | '/reservations'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$listingId' | '/favourites' | '/properties' | '/reservations'
  id:
    | '__root__'
    | '/'
    | '/$listingId'
    | '/favourites'
    | '/properties'
    | '/reservations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListingIdRoute: typeof ListingIdRoute
  FavouritesRoute: typeof FavouritesRoute
  PropertiesRoute: typeof PropertiesRoute
  ReservationsRoute: typeof ReservationsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListingIdRoute: ListingIdRoute,
  FavouritesRoute: FavouritesRoute,
  PropertiesRoute: PropertiesRoute,
  ReservationsRoute: ReservationsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$listingId",
        "/favourites",
        "/properties",
        "/reservations"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$listingId": {
      "filePath": "$listingId.tsx"
    },
    "/favourites": {
      "filePath": "favourites.tsx"
    },
    "/properties": {
      "filePath": "properties.tsx"
    },
    "/reservations": {
      "filePath": "reservations.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
